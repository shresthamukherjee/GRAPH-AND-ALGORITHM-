import java.util.*;

class Graph
{
	static class pair
	{
		int first, second;
		public pair(int first, int second)
		{
			this.first = first;
			this.second = second;
		}
	}
static Vector<pair > []graph = new Vector[100000];
static void addEdge(int frm, int to, int weight)
{

	graph[frm].add(new pair( to, weight ));
}
static void print_distance(int d[], int V)
{
	System.out.print("Vertex \t\t Distance"
		+ " from source" +"\n");

	for (int i = 1; i <= V; i++)
	{
		System.out.printf("%d \t\t %d\n", i, d[i]);
	}
}
static void shortestPathFaster(int S, int V)
{
	int []d = new int[V + 1];
	boolean []inQueue = new boolean[V + 1];
	for (int i = 0; i <= V; i++)
	{
		d[i] = Integer.MAX_VALUE;
	}
	d[S] = 0;

	Queue<Integer> q = new LinkedList<>();
	q.add(S);
	inQueue[S] = true;

	while (!q.isEmpty())
	{
		int u = q.peek();
		q.remove();
		inQueue[u] = false;
		for (int i = 0; i < graph[u].size(); i++)
		{

			int v = graph[u].get(i).first;
			int weight = graph[u].get(i).second;

			if (d[v] > d[u] + weight)
			{
				d[v] = d[u] + weight;
				if (!inQueue[v])
				{
					q.add(v);
					inQueue[v] = true;
				}
			}
		}
	}
	print_distance(d, V);
}
public static void main(String[] args)
{
	int V = 5;
	int S = 1;
	for (int i = 0; i < graph.length; i++)
	{
		graph[i] = new Vector<pair>();
	}
	addEdge(1, 2, 1);
	addEdge(2, 3, 7);
	addEdge(2, 4, -2);
	addEdge(1, 3, 8);
	addEdge(1, 4, 9);
	addEdge(3, 4, 3);
	addEdge(2, 5, 3);
	addEdge(4, 5, -3);
	shortestPathFaster(S, V);
}
}

